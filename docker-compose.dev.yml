version: '3.8'

services:
  postgres_db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      TZ: ${TZ}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_db_data:/var/lib/postgresql/data
    networks:
      - person_dectection-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  detector_api:
    container_name: detector_api
    build:
      context: ./detector
      dockerfile: Dockerfile
    ports:
      - ${DETECT_PORT}:${DETECT_PORT}
    environment:
      PYTHONUNBUFFERED: 1
      CONFIDENT_THRESHOLD: ${CONFIDENT_THRESHOLD}
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - person_dectection-network

  backend_api:
    container_name: backend_api
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./results:/app/results
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT} # Maps port 8000 on the host to port 8000 in the container
    environment:
      PYTHONUNBUFFERED: 1 # Ensures logs are streamed to the console
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_DB: ${POSTGRES_DB}
      DETECT_URL: ${DETECT_URL}
      CONFIDENT_THRESHOLD: ${CONFIDENT_THRESHOLD}
      TZ: ${TZ}
    depends_on:
      postgres_db:
        condition: service_healthy
    networks:
      - person_dectection-network

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NEXT_PUBLIC_API_URL=http://backend_api:${BACKEND_PORT}/api/v1/detect
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - backend_api
    networks:
      - person_dectection-network
  
  
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "${ADMINER_PORT}:${ADMINER_PORT}"
    networks:
      - person_dectection-network

volumes:
  postgres_db_data:

networks:
  person_dectection-network:
    driver: bridge
